{__mainExpression:0} = []: %let v0 = (Main.main()) in (Starknet.unsafePerformIO(v0))
{csegen:1} = []: <{{csegen:1}:0} underapp 3>()
{{csegen:1}:0} = [2, 1, 0]: %con Common.MkCairoRes(v0, v1)
{csegen:3} = []: <{{csegen:3}:0} underapp 3>()
{{csegen:3}:0} = [2, 1, 0]: %let v5 = (v1 @ (v0)) in (%case v5 of { %conalt Common.MkCairoRes(v3, v4) => v4 @ (v3) Nothing })
{csegen:4} = []: %let v0 = (<{{csegen:4}:0} underapp 1>()) in (%let v1 = (<{{csegen:4}:1} underapp 1>()) in (%let v2 = (<{{csegen:4}:2} underapp 1>()) in (%con Starknet.Codable at Starknet:33:1--37:24(v0, v1, v2))))
{{csegen:4}:2} = [0]: Common.Segment.unsafeHead(v0)
{{csegen:4}:1} = [0]: Starknet.encode(v0)
{{csegen:4}:0} = [0]: Starknet.size(v0)
{csegen:8} = []: %let v6 = (%let v3 = (<{{csegen:8}:0} underapp 2>()) in (%let v4 = (Main.balance()) in (%let v5 = (%let v2 = (%let v1 = (%let v0 = (12) in (%extprim Common.Felt.prim__mk_Felt(v0))) in (Starknet.encode(v1))) in (Common.Segment.segmentToList(v2))) in (Prelude.Types.foldr(v3, v4, v5))))) in (Starknet.Syscall.normalizeAddress(v6))
{{csegen:8}:0} = [1, 0]: Common.Pedersen.pedersenHash(v1, v0)
prim__add_Integer = [0, 1]: %op +Integer(v0, v1)
prim__sub_Integer = [0, 1]: %op -Integer(v0, v1)
prim__mul_Integer = [0, 1]: %op *Integer(v0, v1)
Main.ABI.Wrapper.writeEx = [0]: %let v11 = (%let v9 = (%let v7 = (%let v4 = (%let v1 = (<Main.ABI.Wrapper.{writeEx:0} underapp 5>()) in (%let v2 = ({csegen:1}()) in (%let v3 = (<Main.ABI.Wrapper.{writeEx:1} underapp 5>()) in (%con Prelude.Interfaces.MkApplicative(v1, v2, v3))))) in (%let v5 = (<Main.ABI.Wrapper.{writeEx:2} underapp 5>()) in (%let v6 = ({csegen:3}()) in (%con Prelude.Interfaces.MkMonad(v4, v5, v6))))) in (%let v8 = (<Main.ABI.Wrapper.{writeEx:3} underapp 4>()) in (%con Starknet.View at Starknet:49:1--51:59(v7, v8)))) in (%let v10 = (<Main.ABI.Wrapper.{writeEx:5} underapp 4>()) in (%con Starknet.External at Starknet:55:1--57:77(v9, v10)))) in (Main.writeEx(v11, v0))
Main.ABI.Wrapper.{writeEx:5} = [3, 2, 1, 0]: %let v4 = (%case v2 of { %conalt Starknet.Codable at Starknet:33:1--37:24(v5, v6, v7) => v6 @ (v0) Nothing }) in (<Main.ABI.Wrapper.{writeEx:4} underapp 1>(v4, v1))
Main.ABI.Wrapper.{writeEx:4} = [0, 1, 2]: %let v6 = (%let v3 = (1) in (%let v4 = (Common.Segment.size(v0)) in (%let v5 = (Common.Segment.mem(v0)) in (Starknet.Syscall.storageWritePrim(v3, v1, v4, v5, v2))))) in (%let v7 = (%con Builtin.MkUnit()) in (%con Common.MkCairoRes(v6, v7)))
Main.ABI.Wrapper.{writeEx:3} = [3, 2, 1, 0]: %let v13 = (%let v5 = (1) in (%let v6 = (%let v4 = (1) in (%extprim Common.Felt.prim__mk_Felt(v4))) in (Starknet.Syscall.storageReadPrim(v5, v1, v6, v0)))) in (%case v13 of { %conalt Common.MkCairoRes(v7, v8) => %let v12 = (%case v2 of { %conalt Starknet.Codable at Starknet:33:1--37:24(v9, v10, v11) => v11 @ (v8) Nothing }) in (%con Common.MkCairoRes(v7, v12)) Nothing })
Main.ABI.Wrapper.{writeEx:2} = [4, 3, 2, 1, 0]: %let v8 = (v2 @ (v0)) in (%case v8 of { %conalt Common.MkCairoRes(v5, v6) => %let v7 = (v1 @ (v6)) in (v7 @ (v5)) Nothing })
Main.ABI.Wrapper.{writeEx:1} = [4, 3, 2, 1, 0]: %let v11 = (v2 @ (v0)) in (%case v11 of { %conalt Common.MkCairoRes(v5, v6) => %let v10 = (v1 @ (v5)) in (%case v10 of { %conalt Common.MkCairoRes(v7, v8) => %let v9 = (v6 @ (v8)) in (%con Common.MkCairoRes(v7, v9)) Nothing }) Nothing })
Main.ABI.Wrapper.{writeEx:0} = [4, 3, 2, 1, 0]: %let v8 = (v1 @ (v0)) in (%case v8 of { %conalt Common.MkCairoRes(v5, v6) => %let v7 = (v2 @ (v6)) in (%con Common.MkCairoRes(v5, v7)) Nothing })
Main.writeEx = [0, 1]: %let v2 = ({csegen:4}()) in (%let v3 = ({csegen:8}()) in (Starknet.writeStorageVar(v0, v2, v3, v1)))
Main.ABI.Wrapper.viewEx = []: %let v8 = (%let v6 = (%let v3 = (%let v0 = (<Main.ABI.Wrapper.{viewEx:0} underapp 5>()) in (%let v1 = ({csegen:1}()) in (%let v2 = (<Main.ABI.Wrapper.{viewEx:1} underapp 5>()) in (%con Prelude.Interfaces.MkApplicative(v0, v1, v2))))) in (%let v4 = (<Main.ABI.Wrapper.{viewEx:2} underapp 5>()) in (%let v5 = ({csegen:3}()) in (%con Prelude.Interfaces.MkMonad(v3, v4, v5))))) in (%let v7 = (<Main.ABI.Wrapper.{viewEx:3} underapp 4>()) in (%con Starknet.View at Starknet:49:1--51:59(v6, v7)))) in (Main.viewEx(v8))
Main.ABI.Wrapper.{viewEx:3} = [3, 2, 1, 0]: %let v13 = (%let v5 = (1) in (%let v6 = (%let v4 = (1) in (%extprim Common.Felt.prim__mk_Felt(v4))) in (Starknet.Syscall.storageReadPrim(v5, v1, v6, v0)))) in (%case v13 of { %conalt Common.MkCairoRes(v7, v8) => %let v12 = (%case v2 of { %conalt Starknet.Codable at Starknet:33:1--37:24(v9, v10, v11) => v11 @ (v8) Nothing }) in (%con Common.MkCairoRes(v7, v12)) Nothing })
Main.ABI.Wrapper.{viewEx:2} = [4, 3, 2, 1, 0]: %let v8 = (v2 @ (v0)) in (%case v8 of { %conalt Common.MkCairoRes(v5, v6) => %let v7 = (v1 @ (v6)) in (v7 @ (v5)) Nothing })
Main.ABI.Wrapper.{viewEx:1} = [4, 3, 2, 1, 0]: %let v11 = (v2 @ (v0)) in (%case v11 of { %conalt Common.MkCairoRes(v5, v6) => %let v10 = (v1 @ (v5)) in (%case v10 of { %conalt Common.MkCairoRes(v7, v8) => %let v9 = (v6 @ (v8)) in (%con Common.MkCairoRes(v7, v9)) Nothing }) Nothing })
Main.ABI.Wrapper.{viewEx:0} = [4, 3, 2, 1, 0]: %let v8 = (v1 @ (v0)) in (%case v8 of { %conalt Common.MkCairoRes(v5, v6) => %let v7 = (v2 @ (v6)) in (%con Common.MkCairoRes(v5, v7)) Nothing })
Main.viewEx = [0]: %let v1 = ({csegen:4}()) in (%let v2 = ({csegen:8}()) in (Starknet.readStorageVar(v0, v1, v2)))
Main.main = []: "Main.Unit';Main.ABI.Wrapper.viewEx;Main.ABI.Wrapper.writeEx;Main.balance_addr"
Main.balance_addr = []: %extprim Main.balance_addr()
Main.balance = []: Main.balance_addr()
Main.Unit' = []: %con Builtin.MkUnit()
Starknet.size = [0]: %let v2 = (%let v1 = (1) in (%extprim Common.Felt.prim__mk_Felt(v1))) in (%con Prelude.Types.Just(v2))
Starknet.encode = [0]: %let v2 = (%let v1 = (%con Prelude.Basics.Nil()) in (%con Prelude.Basics.::(v0, v1))) in (Common.Segment.listToSegment(v2))
Starknet.View at Starknet:49:1--51:59 = Constructor tag Just 0 arity 2 newtype by Nothing
Starknet.External at Starknet:55:1--57:77 = Constructor tag Just 0 arity 2 newtype by Nothing
Starknet.Codable at Starknet:33:1--37:24 = Constructor tag Just 0 arity 3 newtype by Nothing
Starknet.writeStorageVar = [0, 1, 2, 3]: %case v0 of { %conalt Starknet.External at Starknet:55:1--57:77(v4, v5) => %let v8 = (%let v7 = (%let v6 = (v5 @ ([__])) in (v6 @ (v1))) in (v7 @ (v2))) in (v8 @ (v3)) Nothing }
Starknet.unsafePerformIO = [0]: v0
Starknet.readStorageVar = [0, 1, 2]: %case v0 of { %conalt Starknet.View at Starknet:49:1--51:59(v3, v4) => %let v6 = (%let v5 = (v4 @ ([__])) in (v5 @ (v1))) in (v6 @ (v2)) Nothing }
Prelude.Basics.Nil = Constructor tag Just 0 arity 0 newtype by Nothing
Prelude.Basics.:: = Constructor tag Just 1 arity 2 newtype by Nothing
Builtin.believe_me = [0]: %op believe_me([__], [__], v0)
Builtin.MkUnit = Constructor tag Just 0 arity 0 newtype by Nothing
Prelude.Types.foldr = [0, 1, 2]: %case v2 of { %conalt Prelude.Basics.Nil() => v1| %conalt Prelude.Basics.::(v3, v4) => %let v5 = (v0 @ (v3)) in (%let v6 = (Prelude.Types.foldr(v0, v1, v4)) in (v5 @ (v6))) Nothing }
Prelude.Types.prim__integerToNat = [0]: %let v3 = (%let v2 = (%let v1 = (0) in (%op <=Integer(v1, v0))) in (%case v2 of { %constalt(0) => 0 Just 1 })) in (%case v3 of { %constalt(1) => Builtin.believe_me(v0)| %constalt(0) => 0 Nothing })
Prelude.Types.Just = Constructor tag Just 1 arity 1 newtype by Nothing
Prelude.Interfaces.MkMonad = Constructor tag Just 0 arity 3 newtype by Nothing
Prelude.Interfaces.MkApplicative = Constructor tag Just 0 arity 3 newtype by Nothing
Starknet.Syscall.storageWritePrim = Foreign call ["imports:starkware.starknet.common.syscalls storage_write", "code:\nfunc Starknet_Syscall_storageWritePrimHelper(address, len, ptr, syscall_ptr) -> (syscall_ptr):\n    if len == 0:\n        return (syscall_ptr)\n    end\n\n    let syscall_ptr_ = cast(syscall_ptr, felt*)\n    storage_write{syscall_ptr = syscall_ptr_}(address,[ptr])\n    return Starknet_Syscall_storageWritePrimHelper(address + 1, len-1, ptr + 1, cast(syscall_ptr_, felt))\nend\n\n\nfunc Starknet_Syscall_storageWritePrim(hasStaticSize, address, len, ptr, syscall_ptr) -> (syscall_ptr):\n    if hasStaticSize == 1:\n        let (syscall_ptr) = Starknet_Syscall_storageWritePrimHelper(address, len, ptr, syscall_ptr)\n    else:\n        let syscall_ptr_ = cast(syscall_ptr, felt*)\n        storage_write{syscall_ptr = syscall_ptr_}(address,len)\n        let syscall_ptr = cast(syscall_ptr_, felt)\n        let (syscall_ptr) = Starknet_Syscall_storageWritePrimHelper(address+1, len, ptr, syscall_ptr)\n    end\n    return (syscall_ptr)\nend"] [Prelude.Basics.Bool , Common.Felt.Felt , Common.Felt.Felt , Common.Memory.Memory , Common.World ] -> Common.World 
Starknet.Syscall.storageReadPrim = Foreign call ["imports:starkware.starknet.common.syscalls storage_read", "untupled:(_,_)", "code:\nfunc Starknet_Syscall_storageReadPrimHelper(address, len, result, syscall_ptr) -> (syscall_ptr):\n    if len == 0:\n        return (syscall_ptr)\n    end\n\n    let syscall_ptr_ = cast(syscall_ptr, felt*)\n    let (res) = storage_read{syscall_ptr=syscall_ptr_}(address)\n    assert [result] = res\n    return Starknet_Syscall_storageReadPrimHelper(\n        address + 1, len - 1,  cast(result + 1, felt), cast(syscall_ptr_, felt)\n    )\nend\n\nfunc Starknet_Syscall_storageReadPrim(hasStaticSize, address, len, syscall_ptr) -> (\n    syscall_ptr, result\n):  \n    alloc_locals\n    let (result_ptr) = alloc()\n    local result = cast(result_ptr, felt)\n    if hasStaticSize == 1:\n        let (syscall_ptr) = Starknet_Syscall_storageReadPrimHelper(address, len, result, syscall_ptr)\n        return (syscall_ptr, cast(new (len, result), felt))\n    else:\n        let syscall_ptr_ = cast(syscall_ptr, felt*)\n        let (len) = storage_read{syscall_ptr=syscall_ptr_}(address)\n        let (syscall_ptr) = Starknet_Syscall_storageReadPrimHelper(address + 1, len, result, syscall_ptr)\n        return (syscall_ptr, cast(new (len, result), felt))\n    end\nend"] [Prelude.Basics.Bool , Common.Felt.Felt , Common.Felt.Felt , Common.World ] -> Common.CairoRes Common.Segment.Segment 
Starknet.Syscall.normalizeAddress = Foreign call ["imports:starkware.starknet.common.storage normalize_address", "linear_implicits:range_check_ptr", "code:\nfunc Starknet_Syscall_normalizeAddress(range_check_ptr,address) -> (result, range_check_ptr):\n    let (res) = normalize_address{range_check_ptr = range_check_ptr}(address)\n    return (res, range_check_ptr)\nend"] [Common.Felt.Felt ] -> Common.Felt.Felt 
Common.Segment.2780:1509:segSize = [0]: Common.Segment.size(v0)
Common.Segment.2758:1489:buildSegment = [0, 1, 2]: %case v1 of { %conalt Prelude.Basics.Nil() => v2| %conalt Prelude.Basics.::(v3, v4) => %let v5 = (Common.Segment.append(v3, v2)) in (Common.Segment.2758:1489:buildSegment(v0, v4, v5)) Nothing }
Common.Segment.2780:1510:buildList = [0, 1]: %let v8 = (%let v2 = (Common.Segment.2780:1509:segSize(v0)) in (%extprim Common.Felt.prim__eq_Felt(v1, v2))) in (%case v8 of { %constalt(1) => %con Prelude.Basics.Nil()| %constalt(0) => %let v6 = (Common.Segment.index(v1, v0)) in (%let v7 = (%let v5 = (%let v4 = (%let v3 = (1) in (%extprim Common.Felt.prim__mk_Felt(v3))) in (%extprim Common.Felt.prim__add_Felt(v1, v4))) in (Common.Segment.2780:1510:buildList(v0, v5))) in (%con Prelude.Basics.::(v6, v7))) Nothing })
Common.Segment.unsafeHead = Foreign call ["code:\nfunc Common_Segment_unsafeHead(segment) -> (result):\n    if [segment] == 0:\n        assert 1 = 0\n    end\n   return ([[segment+1]])\nend"] [Common.Segment.Segment ] -> Common.Felt.Felt 
Common.Segment.unsafeCreateSegmentBuilder = Foreign call ["apStable:True", "imports:starkware.cairo.common.alloc alloc", "code:\nfunc Common_Segment_unsafeCreateSegmentBuilder() -> (builder):\n    let (segPtr) = alloc()\n    tempvar builder = new (0, segPtr)\n    return (cast(builder,felt))\nend"] [] -> Common.Segment.SegmentBuilder 
Common.Segment.size = Foreign call ["code:\nfunc Common_Segment_size(segment) -> (result):\n   return ([segment])\nend"] [Common.Segment.Segment ] -> Common.Felt.Felt 
Common.Segment.segmentToList = [0]: %let v2 = (%let v1 = (0) in (%extprim Common.Felt.prim__mk_Felt(v1))) in (Common.Segment.2780:1510:buildList(v0, v2))
Common.Segment.mem = Foreign call ["code:\nfunc Common_Segment_mem(segment) -> (result):\n   return ([segment+1])\nend"] [Common.Segment.Segment ] -> Common.Memory.Memory 
Common.Segment.listToSegment = [0]: %let v1 = (Common.Segment.unsafeCreateSegmentBuilder()) in (Common.Segment.2758:1489:buildSegment(v0, v0, v1))
Common.Segment.index = Foreign call ["code:\nfunc Common_Segment_index(index, segment) -> (result):\n   return ([[segment+1]+index])\nend"] [Common.Felt.Felt , Common.Segment.Segment ] -> Common.Felt.Felt 
Common.Segment.append = Foreign call ["code:\nfunc Common_Segment_append(value, builder) -> (builder):\n   let segment = [builder+1]\n   let size = [builder]\n   assert [segment + size] = value # Append value\n   \n   tempvar newBuilder = new (size + 1, segment)     \n   return (cast(newBuilder, felt))\nend"] [Common.Felt.Felt , Common.Segment.SegmentBuilder ] -> Common.Segment.SegmentBuilder 
Common.MkCairoRes = Constructor tag Just 0 arity 2 newtype by Nothing
Common.Pedersen.pedersenHash = Foreign call ["apStable:True", "linear_implicits:pedersen_ptr", "code:\nfunc Common_Pedersen_pedersenHash(pedersen_ptr, x, y) -> (result, pedersen_ptr):\n    assert [pedersen_ptr] = x\n    assert [pedersen_ptr + 1] = y\n    return ([pedersen_ptr + 2], pedersen_ptr + 3)\nend"] [Common.Felt.Felt , Common.Felt.Felt ] -> Common.Felt.Felt 
