foreign Cairo.Output.cairooutput{}(2) -> (1) stable <none> {
  """
func $name$(value, output_ptr) -> (output_ptr):
    assert [output_ptr] = value
    return (output_ptr + 1)
end"""
}

fun Main.fib(param 0) -> (reg   "res") {
  const_case(param 0) {
    0f -> {
      return (const 0f)
    }
    1f -> {
      return (const 1f)
    }
    default {
      (let   3 @1) = @Felt (param 0 - const 1f);
      (local 0 @1) = Main.fib(let   3 @1);
      (let   2 @1) = @Felt (param 0 - const 2f);
      (let   1 @1) = Main.fib(let   2 @1);
      (let   0 @1) = @Felt (local 0 @1 + let   1 @1);
      return (let   0 @1)
    }
  }
}

extfun no_mangle+main{output_ptr@(reg   "output_ptr")}() -> () {
  (let   1 @0) = Main.fib(const 5f);
  (let   0 @0) = Cairo.Output.cairooutput(let   1 @0, reg   "output_ptr");
  return {output_ptr@(let   0 @0)}()
}
